# -*- coding: utf-8 -*-

cdef inline tuple _parse_format(char* s, tuple args, dict kwargs):
    cdef Py_ssize_t i, inc, key_start, conversion_start, offset, esc
    cdef str e
    cdef str result
    cdef bytes new_s = s
    cdef char c
    cdef object obj

    cdef list _args = list(args)
    cdef list traverse
    cdef list keys = []

    cdef list cnv_idx = []

    key_start = -1
    inc = len(args) #increment arg count

    for i, c in enumerate(s):
        if key_start != -1:
            if c is '}' or c is ':':
                keys.append(s[key_start+1:i])
                key_start = -1
            elif c is '!':
                keys.append(s[key_start+1:i+2])
                #s = s[:i] + s[i+2:]
                cnv_idx.append(i)
                key_start = -1

        if c is '{':
            key_start = i

    offset = 0
    for i in cnv_idx:
        new_s = new_s[:i+offset] + new_s[i+offset+2:]
        offset -= 2

    for e in keys:
        if e[-2:] == '!s':
            esc = False
            e = e[:-2]
        elif e[-2:] == '!r':
            esc = True
            e = e[:-2]
        else:
            esc = True

        if e.isdigit():
            i = int(e)
            obj = args[i]
        elif '[' in e:
            traverse = [x.replace(']', '') for x in e.split('[')]
            obj = kwargs[traverse[0]]
            for x in traverse[1:]:
                obj = obj[x]
        else:
            obj = kwargs[e]

        if isinstance(obj, (float, int)):
            new_s = new_s.replace('{'+e, '{'+str(inc))
            inc += 1
            _args.append(obj)
        elif esc:
            result = repr(obj).replace('<', '&lt;').replace('>', '&gt;')
            if isinstance(obj, str):
                result = result[1:-1]
            elif isinstance(obj, unicode):
                result = result[2:-1]
            new_s = new_s.replace('{'+e, '{'+str(inc))
            inc += 1
            _args.append(result)
        else:
            new_s = new_s.replace('{'+e, '{'+str(inc))
            inc += 1
            _args.append(obj)

    return (new_s, _args)

def fmt(__fmt_string__, *args, **kwargs):
    __fmt_string__, _args = _parse_format(__fmt_string__, args, kwargs)
    return __fmt_string__.format(*_args)
    #return __fmt_string__.format(*args, **kwargs)


